""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"       Ilias Stamatis <stamatis.iliass@gmail.com>
"
" Initially based on:
"       https://github.com/spf13/spf13-vim
"       https://bitbucket.org/pmav99/dotfiles/src/fdd48164c029/vim/vimrc
"
" Sections:
"       -> Setup Environment
"       -> Plugins
"       -> General
"       -> Basic Stuff
"       -> Clipboard
"       -> Indentation, Tabs, Spaces
"       -> Whitespace
"       -> Line Number
"       -> Scrolling and Folding
"       -> Wrap, Vertical Line
"       -> Buffers, Windows, Tabs
"       -> Highlight and Searching
"       -> Backup and Swap
"       -> Compile and Run Code
"       -> Languages
"       -> Shell Command
"       -> Plugins Configuration
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Setup Environment {
    " The following two lines are required by Vundle.
    set nocompatible                " be iMproved (must be first line)
    filetype off                    " required!

    " Set the runtime path to include Vundle and initialize.
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
" }

" Plugins {
    " Dependencies {
        " The plugin manager
        Plugin 'gmarik/Vundle.vim'
    " }

    " General {
        " File explorer
        " Usage: Open explorer and find current file with <leader>e (custom map)
        Plugin 'scrooloose/nerdtree'

        " Autoclose brackets, parens, quotes, etc.
		Plugin 'Raimondi/delimitMate'

        " Undo history graph
        " Usage: Open tree with <leader>u (custom map)
        Plugin 'mbbill/undotree'

        " Easily delete, change and add surroundings
        " Usage: https://github.com/tpope/vim-surround
        Plugin 'tpope/vim-surround'

        " Vim motions. This plugin is really awesome!
        " Usage: for example type <leader><leader>w and navigate quickly
        Plugin 'easymotion/vim-easymotion'

        " Discord RPC
        Plugin 'vbe0201/vimdiscord'
    " }

    " General Programming {
        if v:version < 704
            " Code completion (fallback)
            Plugin 'Shougo/neocomplcache'
        else
            " Code completion
            Plugin 'Valloric/YouCompleteMe'
        endif

        " Code comments wrangle
        Plugin 'scrooloose/nerdcommenter'

        if executable('ctags')
            " Navigation via file tags
            " Usage: Open the side bar with <leader>tt (custom map)
            Plugin 'majutsushi/tagbar'
        endif

    " Snippets {
        " Snippets completion (doesn't provide snippets itself)
        " Usage: Autocomplete snippets using ** (custom map)
        Plugin 'garbas/vim-snipmate'

        " Dependencies of vim-snipmate
        Plugin 'MarcWeber/vim-addon-mw-utils'
        Plugin 'tomtom/tlib_vim'

        " Various snippets collection
        Plugin 'honza/vim-snippets'
    " }

    " Python {
        if has("python")
            " Python support (mainly used for syntax checking)
            Plugin 'klen/python-mode'
        endif
    " }

    " Html {
        " Autoclose html tags
        Plugin 'vim-scripts/HTML-AutoCloseTag'

        " Jump between opening and closing HTML tags
        " Usage: Type % while on a tag
        " Plugin 'edsono/vim-matchit'

        " Expand abbreviation like emmet (quickly generate html code)
        " Usage: https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
        Plugin 'mattn/emmet-vim'
    " }

    " Themes & Look{
        " solarized theme
        " Plugin 'altercation/vim-colors-solarized'

        " Gruvbox
        Plugin 'morhetz/gruvbox'

        " colorizer - colorize all text in the form #rrggbb or #rgb
        Plugin 'lilydjwg/colorizer'
    " }

    call vundle#end()               " required
    filetype plugin indent on       " required, automatically detect file types
" }

" General {
    syntax on                       " syntax highlighting
    set encoding=utf-8
    scriptencoding utf-8
    set guiheadroom=0               " for gvim, removes annoying GTK-enabled spacing

    set title                       " set window title

    if has('statusline')
        set laststatus=2            " always show a status line
    endif

    if has('cmdline_info')
        set ruler                   " show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
        set showmode                " display the current mode
        set showcmd                 " show partial commands in status line and
                                    " selected characters/lines in visual mode
    endif

    set backspace=indent,eol,start  " backspace for dummies
    set history=1000                " store a ton of history (default is 20)
    set shell=$SHELL                " use user's default shell

    " Time out on key codes but not mappings.
    set notimeout
    set ttimeout
    set ttimeoutlen=10

    set background=dark
    if has('gui_running')
        colorscheme gruvbox
        set guioptions=
    else
        colorscheme default
    endif
" }

" Basic Stuff {
    " With a map leader it's possible to do extra key combinations.
    let mapleader = ","
    let maplocalleader = '\\'

    " Save typing and eliminate :Q style typos due to lazy holding shift.
    nnoremap ; :

    nnoremap 0 ^

    " Use s (insert before) or S (insert after) to insert a single character.
    " Returns to normal mode automatically. It allows repetitions as well.
    function! RepeatChar(char, count)
        return repeat(a:char, a:count)
    endfunction
    nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<cr>
    nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<cr>

    " Make sure Vim returns to the same line when you reopen a file.
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    " Automatically change working directory to that of the current file.
    autocmd BufEnter * silent! lcd %:p:h

    " For when you forget to sudo.. Really Write the file.
    cnoremap w!! w !sudo tee % >/dev/null

    " Toggle background quickly
    nnoremap <leader>b :let &background = ( &background == "dark"? "light" : "dark" )<CR>

    " Open in browsers - works correctly on gui only, because of F12
    nnoremap <F12>q :exe ':silent !qutebrowser %'<CR>
    nnoremap <F12>f :exe ':silent !firefox %'<CR>
    nnoremap <F12>g :exe ':silent !google-chrome-stable %'<CR>

" }

" Clipboard {
    nnoremap <leader>p :set paste<cr>"+p<cr>:set nopaste<cr>
    nnoremap <leader>P :set paste<cr>"+P<cr>:set nopaste<cr>
    nnoremap <leader>y "+y
    vnoremap <leader>y "+ygv

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$
" }

" Indentation, Tabs, Spaces {
    set tabstop=4                   " show tabs as 4 spaces
    set shiftwidth=4                " use indents of 4 spaces
    set shiftround                  " always round to multiple of 'shiftwidth'
    set softtabstop=4               " let backspace delete indent
    set noexpandtab                 " tabs are tabs, not spaces
    set smarttab
    set formatoptions=qrn1
    set autoindent                  " indent at the same level of the previous line

    autocmd FileType python,javascript,html,css call g:ToggleIndentation(4)
    autocmd FileType python,javascript,html,css set expandtab  " tabs are spaces

    " all html files are html, no htmldjango etc.
    au BufNewFile,BufRead *.html set filetype=html

    function! g:ToggleIndentation(num)
        execute 'set tabstop='.a:num
        execute 'set shiftwidth='.a:num
        execute 'set softtabstop='.a:num
    endfunc
" }

" Whitespace {
    " Remove trailing whitespaces when saving.
    autocmd BufWritePre * :%s/\s\+$//e

    " Clear a line quickly.
    nnoremap <leader><space> ^D

    " Insert empty line above or below while staying in normal mode.
    nnoremap <leader>o :set paste<cr>m`o<Esc>``:set nopaste<cr>
    nnoremap <leader>O :set paste<cr>m`O<Esc>``:set nopaste<cr>
" }

" Line Numbers {
    set number                      " in case relative line numbers are not supported
    if exists('+relativenumber')
        set relativenumber
    endif
    " Switch between relative and absolute line number.
    function! g:ToggleNuMode()
        if(&relativenumber == 1)
            set norelativenumber
        else
            set relativenumber
        endif
    endfunc

    nnoremap <leader>nn :call g:ToggleNuMode()<cr>
" }

" Scrolling and Folding {
    set foldenable                  " enable folding
    set scrolloff=3                 " minimum lines to keep above and below cursor

    " Map space to toggle the current fold open/closed.
    nnoremap <space> za

    nnoremap <leader>f0 :set foldlevel=0<cr>
    nnoremap <leader>f1 :set foldlevel=1<cr>
    nnoremap <leader>f2 :set foldlevel=2<cr>
    nnoremap <leader>f3 :set foldlevel=3<cr>
    nnoremap <leader>f4 :set foldlevel=4<cr>
    nnoremap <leader>f5 :set foldlevel=5<cr>
    nnoremap <leader>f6 :set foldlevel=6<cr>
    nnoremap <leader>f7 :set foldlevel=7<cr>
    nnoremap <leader>f8 :set foldlevel=8<cr>
    nnoremap <leader>f9 :set foldlevel=9<cr>
" }

" Wrap, Vertical Line {
    set wrap                        " wrap long lines
    set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap to

    " Wrapped lines goes down/up to next row, rather than next line in file.
    nnoremap j gj
    nnoremap k gk

    if exists('+colorcolumn')
        " Automatically show the vertical line for files containing source code.
        autocmd FileType c,cpp,java,python,javascript,matlab set colorcolumn=80
    endif

    " Show/hide vertical line.
    function! g:ToggleColorColumn()
        if(&colorcolumn == 0)
            set colorcolumn=80
        else
            set colorcolumn=0
        endif
    endfunc

    nnoremap <leader>l :call g:ToggleColorColumn()<cr>
" }

" Buffers, Windows, Tabs {
    set hidden                      " allow buffer switching without saving
    set winminheight=0              " windows can be 0 lines high
    set splitbelow                  " when splitting put new window below of the current one
    set splitright                  " when splitting put new window to the right of the current one

    " Fast close window.
    nnoremap <leader>q :q<cr>
    nnoremap <leader><leader>q :q!<cr>

    " Easier moving in windows.
    nnoremap <C-J> <C-W>j
    nnoremap <C-K> <C-W>k
    nnoremap <C-L> <C-W>l
    nnoremap <C-H> <C-W>h

    " Make all windows (almost) equally high and wide.
    nnoremap <Leader>= <C-w>=

    " Useful mappings for managing tabs.
    nnoremap <leader>tn :tabnew<cr>
    nnoremap <leader>to :tabonly<cr>
    nnoremap <leader>tc :tabclose<cr>
    nnoremap <leader>tm :tabmove

    " Go to right/left tab.
    nnoremap > gt
    nnoremap < gT
" }

" Highlight and Searching {
    set incsearch                   " incremental search
    set hlsearch                    " highlight search terms
    set ignorecase                  " case insensitive search
    set smartcase                   " case sensitive when uc present

    " Use sane regexes.
    nnoremap / /\v
    vnoremap / /\v

    " Matching pairs.
    set showmatch                   " show matching symbols (parens etc)
    set matchtime=3                 " time to show matching paren
    set matchpairs+=(:)
    set matchpairs+=[:]
    set matchpairs+={:}
    set matchpairs+=<:>

    " Clear highlighted search.
    nnoremap <silent> <leader>/ :nohlsearch<cr>

    " Keep search matches in the middle of the window.
    nnoremap n nzzzv

    " Highlight word occurrences but do not jump to the next result.
    nnoremap <leader>* *N
" }

" Backup and Swap {
    " Backup {
        let directory = $HOME . "/.vim/backup/"

        " Create backup directory if it doesn't exists.
        if !isdirectory(directory)
            silent! execute "!mkdir -p ".directory
        endif

        set backup                  " enable backups
        execute "set backupdir=".directory
    " }

    " Swap {
        set noswapfile              " turn swap off
    " }
" }

" Compile and Run Code {
    " Run {
        autocmd FileType python,sh,bash,zsh nnoremap <leader>r :w<cr> :!clear; ./%<cr>
        autocmd FileType c,cpp nnoremap <leader>r :!clear; ./%:r<cr>
        autocmd FileType java nnoremap <leader>r :!clear; java %:r<cr>
        autocmd FileType matlab nnoremap <leader>r :!clear; octave %<cr>
    " }

    " Compile {
        autocmd FileType c,cpp,java nnoremap <leader>m :w<cr> :Shell clear; make<cr>
        autocmd FileType c nnoremap <leader>c8 :w<cr> :Shell gcc -Wall -W -pedantic -ansi -std=c89 -o %:r %<cr>
        autocmd FileType c nnoremap <leader>c9 :w<cr> :Shell gcc -Wall -W -pedantic -ansi -std=c99 -o %:r %<cr>
        autocmd FileType cpp nnoremap <leader>c1 :w<cr> :Shell g++ -std=c++11 -o %:r %<cr>
        autocmd FileType java nnoremap <leader>c9 :w<cr> :Shell javac %<cr>
    " }

    " Make file executable and reload it.
    nnoremap <leader>x :!chmod +x %<cr> :e %<cr>
" }

" Languages {
    " Greek {
        set keymap=greek_utf-8
    " }

    " Easy change keymap.
    inoremap <leader>g <c-^>

    " Don't enable keymap by default in Insert mode and when entering a search pattern.
    set iminsert=0
    set imsearch=-1
" }

" Shell Command {
    " Display output of shell commands in new window.
    " Only one window by command, if a window already exists for a command, it will be reused.
    " E.g. :Shell ls
    function! s:ExecuteInShell(command, bang)
        let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

        if (_ != '')
            let s:_ = _
            let bufnr = bufnr('%')
            let winnr = bufwinnr('^' . _ . '$')
            silent! execute  winnr < 0 ? 'belowright new ' . fnameescape(_) : winnr . 'wincmd w'
            setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile wrap number
            silent! :%d
            let message = 'Execute ' . _ . '...'
            call append(0, message)
            echo message
            silent! 2d | resize 1 | redraw
            silent! execute 'silent! %!'. _
            silent! execute 'resize ' . line('$')
            silent! execute 'syntax on'
            silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
            silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
            silent! execute 'nnoremap <silent> <buffer> <cr> :call <SID>ExecuteInShell(''' . _ . ''', '''')<cr>'
            " Reexecute command with <localleader>r in a window opened by :Shell.
            silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<cr>'
            " Go to the previous window with <localleader>g.
            silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<cr>'
            nnoremap <silent> <buffer> <C-W>_ :execute 'resize ' . line('$')<cr>
            silent! syntax on
        endif
    endfunction

    command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
" }

" Plugins Configuration {
    " snipmate {
        imap <expr> ** pumvisible() ? '<esc><Plug>snipMateNextOrTrigger' : '<Plug>snipMateNextOrTrigger'
        let g:snipMate = { 'snippet_version' : 1 }
    " }

    " Ctags {
        set tags=./tags;/,~/.vimtags
    " }

    " NerdTree {
        nnoremap <C-e> :NERDTreeToggle<cr>

        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        " Close the tree window after opening a file.
        let NERDTreeQuitOnOpen=1
    " }

    " TagBar {
         nnoremap <silent> <leader>tt :TagbarToggle<cr>
    " }

    " undotree {
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_setfocuswhentoggle=1
        nnoremap <leader>u :UndotreeToggle<cr>
    " }

    "vim-xkbswitch {
        let g:XkbSwitchEnabled = 1
    "}

	" colorizer {
		nmap ,ct <Plug>Colorizer
	"}

    " delimitMate {
        au FileType cpp,c,java,python let b:delimitMate_matchpairs = '(:),{:},[:]'
    " }

    " tex
    if has("tex")
       " g:vimtex_latexmk_options = '-pdflatex="xelatex -synctex=1"'
        g:vimtex_view_method = 'zathura'
    endif
    "

    if has("python")
        " python-mode {
            " Don't trim unused white spaces on save (I handle this anyway)
            let g:pymode_trim_whitespaces = 0
            " I prefer using my options
            let g:pymode_options = 0
            " I handle indentation too
            let g:pymode_indent = 0
            " No folding please
            let g:pymode_folding = 0
            " No motions
            let g:pymode_motion = 0
            " No virtualenv support
            let g:pymode_virtualenv = 0
            " I handle running python code as well
            let g:pymode_run = 0
            " No rope support
            let g:pymode_rope = 0
            " No pymode syntax
            let g:pymode_syntax = 0

            " Choose syntax checkers
            let g:pymode_lint_checkers = ['pyflakes', 'mccabe']

            " Do not check code on every save
            let g:pymode_lint_on_write = 0

            " Check code manually
            cnoremap check PymodeLint
        " }
    endif

    if v:version < 704
        " neocomplcache {
            " Disable AutoComplPop.
            let g:acp_enableAtStartup = 0
            " Use neocomplcache.
            let g:neocomplcache_enable_at_startup = 1
            " Use smartcase.
            let g:neocomplcache_enable_smart_case = 1
            " Set minimum syntax keyword length.
            let g:neocomplcache_min_syntax_length = 3
            let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

            " Define dictionary.
            let g:neocomplcache_dictionary_filetype_lists = {
                \ 'default' : '',
                \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ 'scheme' : $HOME.'/.gosh_completions'
                    \ }

            " Define keyword.
            if !exists('g:neocomplcache_keyword_patterns')
                let g:neocomplcache_keyword_patterns = {}
            endif
            let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

            " Plugin key-mappings.
            inoremap <expr><C-g>     neocomplcache#undo_completion()
            inoremap <expr><C-l>     neocomplcache#complete_common_string()

            " Recommended key-mappings.
            " <CR>: close popup and save indent.
            inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
            function! s:my_cr_function()
              return neocomplcache#smart_close_popup() . "\<CR>"
              " For no inserting <CR> key.
              "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
            endfunction
            " <TAB>: completion.
            inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
            " <C-h>, <BS>: close popup and delete backword char.
            inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
            inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
            inoremap <expr><C-y>  neocomplcache#close_popup()
            inoremap <expr><C-e>  neocomplcache#cancel_popup()
            " Close popup by <Space>.
            "inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

            " Enable omni completion.
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

            " Enable heavy omni completion.
            if !exists('g:neocomplcache_force_omni_patterns')
              let g:neocomplcache_force_omni_patterns = {}
            endif
            let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
            let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
            let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

            " For perlomni.vim setting.
            " https://github.com/c9s/perlomni.vim
            let g:neocomplcache_force_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
        " }
    else
        " YouCompleteMe {
            nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
            nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
            nnoremap <leader>m :let g:ycm_auto_trigger = ( g:ycm_auto_trigger == "0"? "1" : "0" )<CR>
            let g:ycm_confirm_extra_conf = 0
        " }
    endif

" Modeline {
" vim: set tabstop=4 shiftwidth=4 softtabstop=4 expandtab:
" }
